@using AutomacaoFolhaPagamento.Models;

@model AutomacaoFolhaPagamento.Models.CalculaFolhaViewModel

<style>
    .folha-pagamento {
        border: 1px solid #333;
        padding: 30px;
        width: 80%;
        margin: 20px auto;
        background-color: #fff;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    #gerarPDF {
        display: block;
        margin: 20px auto;
        padding: 10px 20px;
        background-color: #007BFF;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        #gerarPDF:hover {
            background-color: #0056b3;
        }
    </style>

<nav style="--bs-breadcrumb-divider: url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='%236c757d'/%3E%3C/svg%3E&#34;);" aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index"><span class="fa fa-home"></span></a></li>
        <li class="breadcrumb-item active" aria-current="page">Cálculo de folha</li>
    </ol>
</nav>

<div class="container">
    <form class="row g-3 mb-3" id="calculo" method="post">
        <div class="container" id="tabelaDados">
        <div class="d-flex justify-content-between">
            <div class="col-6">
                <label for="staticEmail2" class="">Funcionário</label>
                <select class="form-select" id="funcionarioSelect" name="FuncionarioId">
                        @if (@Model.DetalhesFuncionario != null)
                        {
                            <option value="">@Model.DetalhesFuncionario?[0].nomeFuncionario</option>
                        }
                        else
                        {
                        <option value="">Selecione um funcionário</option>
                        
                        }
                       
                    @foreach (var funcionario in Model.Funcionarios)
                    {
                        <option value="@funcionario.id_funcionario">@funcionario.id_funcionario - @funcionario.nome_funcionario</option>
                    }
                </select>
            </div>
            <div class="col-4">
                <label for="inputPassword2" class="">Departamento</label>
                <input type="text" class="form-control" id="inputPassword2" readonly value="@Model.DetalhesFuncionario?[0].departamento">
            </div>
        </div>
        <input type="text" class="form-control" id="idFuncionario" hidden readonly value="@Model.SelecionadoFuncionarioId">
        <div class="d-flex justify-content-between">
            <div class="col-3">
                <label for="inputPassword2" class="">Cargo </label>
                <input type="text" class="form-control" id="inputPassword2" readonly value="@Model.DetalhesFuncionario?[0].cargo">
            </div>
            <div class="col-2">
                <label for="inputPassword2" class="">Salário</label>
                <input type="text" class="form-control" id="inputPassword2" readonly value="R$ @Model.DetalhesFuncionario?[0].salario">
            </div>

            <div class="col-2 d-grid">
                <label for="inputPassword2" class="">Mês</label>
                <select class="form-select" name="Mes" required>
                    <option>Escolha o mês</option>
                    <option value="01">Janeiro</option>
                    <option value="02">Fevereiro</option>
                    <option value="03">Março</option>
                    <option value="04">Abril</option>
                    <option value="05">Maio</option>
                    <option value="06">Junho</option>
                    <option value="07">Julho</option>
                    <option value="08">Agosto</option>
                    <option value="09">Setembro</option>
                    <option value="10">Outubro</option>
                    <option value="11">Novembro</option>
                    <option value="12">Dezembro</option>
                </select>
            </div>
            <div class="col-2 d-grid">
                <label for="inputPassword2" class="">Ano</label>
                <select class="form-select" name="Ano" required>
                    <option>Escolha o ano</option>
                    <option value="2023">2023</option>
                    <option value="2024">2024</option>
                    <option value="2025">2025</option>
                    <option value="2026">2026</option>
                    <option value="2027">2027</option>
                    <option value="2028">2028</option>
                    <option value="2029">2029</option>
                    <option value="2030">2030</option>
                </select>
            </div>
        </div>

    <div class="d-flex float-end justify-content-end mt-5">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#myModal">Adicionar</button>
    </div>

       

        <div class="modal fade w-100" id="myModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" style="margin-bottom:16px">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Adicionar Desconto/Provento</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                    </div>
                    <div class="modal-body">
                        <form id="modalForm">
                            <div class="mb-3">
                                <label for="Nome" class="form-label">Nomenclatura do valor</label>
                                <input type="text" class="form-control" id="nomeValor">
                            </div>
                            <div class="mb-3">
                                <label for="tipoValor" class="form-label">Tipo</label>
                                <select class="form-select" id="tipoValor">
                                    <option value="Provento">Provento</option>
                                    <option value="Desconto">Desconto</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="valorDesconto" class="form-label">Valor (ou porcentagem)</label>
                                <input type="text" class="form-control" id="valorDesconto">
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                        <button type="button" class="btn btn-primary" onclick="adicionarNaTabela()">Adicionar</button>
                    </div>
                </div>
            </div>
        </div>

        <div id="alertMessage" class="alert" role="alert" style="display: none;">
        </div>
        
           
            <table class="table table-striped table-hover table-bordered">
                <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">Tipo</th>
                        <th scope="col">Nome</th>
                        <th scope="col">Valor</th>
                    </tr>
                </thead>
                <tbody>
                @if (!string.IsNullOrEmpty(Model.DetalhesFuncionario?[0].nomeFuncionario))
                {
                    <tr>
                        <th scope="row">1</th>
                        <td>Provento</td>
                        <td>Salário base</td>
                    <td style="color: green; font-weight: 600;" name="NomeValor">@Model.DetalhesFuncionario?[0].salario</td>
                    </tr>
                    <tr>
                        <th scope="row">2</th>
                        <td>Desconto</td>
                        <td>INSS</td>
                    <td style="color: red; font-weight: 600;">@Model.DetalhesFuncionario?[0].descontoINSS</td>
                    </tr>
                    <tr>
                        <th scope="row">3</th>
                        <td>Desconto</td>
                        <td>IRRF</td>
                    <td style="color: red; font-weight: 600;">@Model.DetalhesFuncionario?[0].descontoIRRF</td>
                    </tr>  
                    <tr>
                        <th scope="row">4</th>
                        <td>Desconto</td>
                        <td>FGTS</td>
                    <td style="color: red; font-weight: 600;">@Model.DetalhesFuncionario?[0].descontoFGTS</td>
                    </tr>
                    }
                </tbody>
            </table>
      

        <div class="d-flex">
            <h5>
                Valor Líquido:
                <span id="valorLiquido" style="font-weight:600; font-size: 1.2rem;">
                    R$
                    @{
                        var salarioLiquido = 0.00;
                        if (Model.DetalhesFuncionario != null && Model.DetalhesFuncionario.Any() && !string.IsNullOrEmpty(Model.DetalhesFuncionario[0].nomeFuncionario))
                        {
                                salarioLiquido = (double)Model.DetalhesFuncionario[0].salario - ((double)Model.DetalhesFuncionario[0].descontoINSS + (double)Model.DetalhesFuncionario[0].descontoIRRF + (double)Model.DetalhesFuncionario[0].descontoFGTS);
                        }
                    }
                    @string.Format("{0:N2}", salarioLiquido)
                </span>
            </h5>
        </div>
        </div>

        <div class="d-flex float-end justify-content-end">
            <button type="submit" class="btn btn-success mb-5" onclick="submitForm()">Enviar</button>
        </div>

       

    </form>
    <button id="gerarPDF">Gerar PDF</button>
</div>

<script>
    function submitForm() {
        submitFormulario();
    }

    function attachEvents() {
        document.getElementById('valorDesconto').addEventListener('input', formatarComoBRL);

        document.getElementById("funcionarioSelect").addEventListener('change', function () {
            if (this.value) {
                fetch('/CalculaFolha/AtualizarDetalhesFuncionario?_t=' + new Date().getTime(), {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: 'funcionarioId=' + this.value
                })
                    .then(response => response.text())
                    .then(data => {

                        document.documentElement.innerHTML = data;
                        attachEvents();
                        attachGeneratePDFEvent();
                    })
                    .catch(error => console.error('Erro:', error));
            }
        });
    }


    document.addEventListener("DOMContentLoaded", function () {
        attachEvents();
        attachGeneratePDFEvent();
    });


    function calcularValorLiquido() {
        const rows = document.querySelectorAll('tbody tr');
        let totalProventos = 0;
        let totalDescontos = 0;

        rows.forEach(row => {
            const tipo = row.cells[1].innerText;
            const valor = parseFloat(row.cells[3].innerText.replace('R$', '').replace('.', '').replace(',', '.'));

            if (tipo === 'Provento') {
                totalProventos += valor;
            } else if (tipo === 'Desconto') {
                totalDescontos += valor;
            }
        });

        const valorLiquido = totalProventos - totalDescontos;
        const valorFormatado = valorLiquido.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });

        document.getElementById('valorLiquido').innerText = valorFormatado;
    }

    function formatarComoBRL() {
        let value = this.value.replace(/[^0-9]/g, "");
        if (value.length === 0) return;

        value = parseFloat(value) / 100;
        value = value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });

        this.value = value;
    }

    function adicionarNaTabela() {
        let valorFormatado = document.getElementById('valorDesconto').value;
        let valor = parseFloat(valorFormatado.replace('R$', '').replace('.', '').replace(',', '.'));
        const tipo = document.getElementById('tipoValor').value;
        const nomeValor = document.getElementById('nomeValor').value;

        const tabela = document.querySelector('tbody');
        const newRow = tabela.insertRow();
        newRow.insertCell(0).innerText = tabela.rows.length;
        newRow.insertCell(1).innerText = tipo;
        newRow.insertCell(2).innerText = nomeValor; 

        const cellValor = newRow.insertCell(3);
        cellValor.innerText = valorFormatado;
        if (tipo === 'Provento') {
            cellValor.style.color = 'green';
            cellValor.style.fontWeight = '600';
        } else if (tipo === 'Desconto') {
            cellValor.style.color = 'red';
            cellValor.style.fontWeight = '600';
        }

        const form = document.getElementById('calculo');
        const nomeValorInput = document.createElement('input');
        nomeValorInput.type = 'hidden';
        nomeValorInput.name = 'Proventos[' + (tabela.rows.length - 1) + '].NomeValor';
        nomeValorInput.value = nomeValor;
        form.appendChild(nomeValorInput);

        const tipoValorInput = document.createElement('input');
        tipoValorInput.type = 'hidden';
        tipoValorInput.name = 'Proventos[' + (tabela.rows.length - 1) + '].TipoValor';
        tipoValorInput.value = tipo;
        form.appendChild(tipoValorInput);

        const valorInput = document.createElement('input');
        valorInput.type = 'hidden';
        valorInput.name = 'Proventos[' + (tabela.rows.length - 1) + '].Valor';
        valorInput.value = valor;
        form.appendChild(valorInput);

        calcularValorLiquido();
        const modal = bootstrap.Modal.getInstance(document.getElementById('myModal'));
        modal.hide();
    }


    function submitFormulario() { 
        var form = document.getElementById('calculo');
        var formData = new FormData();

        var funcionarioSelect = document.getElementById('idFuncionario').value;
        var mesSelect = document.querySelector('[name="Mes"]').value;
        var anoSelect = document.querySelector('[name="Ano"]').value;

        if (mesSelect === "Escolha o mês" || anoSelect === "Escolha o ano") {
            var alertMessage = document.getElementById('alertMessage');
            alertMessage.textContent = 'Por favor, selecione um mês e um ano válidos.';
            alertMessage.className = 'alert alert-danger';
            alertMessage.style.display = 'block';
            return;
        }


        formData.append('FuncionarioId', funcionarioSelect);
        formData.append('Mes', mesSelect);
        formData.append('Ano', anoSelect);

        
        var tabela = document.querySelector('tbody');
        for (var i = 0; i < tabela.rows.length; i++) {
            formData.append(`Proventos[${i}].NomeValor`, tabela.rows[i].cells[2].innerText);
            formData.append(`Proventos[${i}].TipoValor`, tabela.rows[i].cells[1].innerText);

            var valor = tabela.rows[i].cells[3].innerText.replace('R$', '').replace('.', '').replace(',', '.').trim();
            formData.append(`Proventos[${i}].Valor`, parseFloat(valor).toFixed(2));
        }


        fetch('/CalculaFolha/AdicionarValores', {
            method: 'POST',
            body: formData  
        })
            .then(response => {
                if (response.status == 422) {
                    throw new Error('Já existe cálculo para esse funcionário referente a ' + mesSelect + '/' + anoSelect + '.');
                } else if (response.status == 200) {
                    var alertMessage = document.getElementById('alertMessage');
                    alertMessage.textContent = 'Cadastro realizado com sucesso!';
                    alertMessage.className = 'alert alert-success';
                    alertMessage.style.display = 'block';
                } else if (!response.ok) {
                    throw new Error('Ocorreu um erro inesperado');
                }
            })
            .catch(error => {
                var alertMessage = document.getElementById('alertMessage');
                alertMessage.textContent = error.message;
                alertMessage.className = 'alert alert-danger';
                alertMessage.style.display = 'block';
            });
    }

    function attachGeneratePDFEvent() {
        document.getElementById('gerarPDF').addEventListener('click', function (event) {
            var folhaPagamento = document.getElementById('tabelaDados');

            html2canvas(folhaPagamento).then(canvas => {
                var imgData = canvas.toDataURL('image/png');
                var doc = new jsPDF('p', 'mm');
                var imgHeight = canvas.height * 210 / canvas.width;
                doc.addImage(imgData, 'PNG', 0, 0, 210, imgHeight);
                doc.save('relatorio.pdf');
            });
        });
    }

 
</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.9/jspdf.plugin.autotable.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.3.2/html2canvas.min.js"></script>



